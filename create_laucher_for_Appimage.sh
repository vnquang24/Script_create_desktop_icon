#!/bin/bash

# Colors for terminal output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Check if zenity is installed
if ! command -v zenity &> /dev/null; then
    echo -e "${YELLOW}Zenity kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t. ƒêang c√†i ƒë·∫∑t...${NC}"
    sudo apt-get update && sudo apt-get install -y zenity || {
        echo -e "${RED}Kh√¥ng th·ªÉ c√†i ƒë·∫∑t zenity. Ti·∫øp t·ª•c v·ªõi giao di·ªán d√≤ng l·ªánh.${NC}"
    }
fi

# Check if running with sudo
check_sudo() {
    if [ "$EUID" -ne 0 ]; then
        if command -v zenity &> /dev/null; then
            zenity --error --title="L·ªói quy·ªÅn" --text="Script n√†y c·∫ßn quy·ªÅn sudo ƒë·ªÉ ch·∫°y.\nVui l√≤ng ch·∫°y l·∫°i v·ªõi sudo." --width=300
        else
            echo -e "${RED}Script n√†y c·∫ßn quy·ªÅn sudo ƒë·ªÉ ch·∫°y. Vui l√≤ng ch·∫°y l·∫°i v·ªõi sudo.${NC}"
        fi
        exit 1
    fi
}

# Function to show a loader animation
show_loader() {
    echo -ne "${BLUE}$1${NC}"
    for i in {1..3}; do
        echo -ne "${YELLOW}.${NC}"
        sleep 0.3
    done
    echo -e " ${GREEN}Ho√†n th√†nh!${NC}"
}

# Function to get AppImage file using GUI or CLI
get_appimage() {
    if command -v zenity &> /dev/null; then
        APPIMAGE=$(zenity --file-selection --title="Ch·ªçn file AppImage" --file-filter="AppImage files (*.AppImage) | *.AppImage" 2>/dev/null)
        if [ -z "$APPIMAGE" ]; then
            zenity --error --title="L·ªói" --text="Kh√¥ng c√≥ file AppImage n√†o ƒë∆∞·ª£c ch·ªçn." --width=300
            exit 1
        fi
    else
        if [ -z "$1" ]; then
            echo -e "${RED}L·ªói: Kh√¥ng c√≥ AppImage ƒë∆∞·ª£c cung c·∫•p. C√°ch d√πng: $0 <AppImage> [Icon]${NC}"
            exit 1
        fi
        APPIMAGE=$1
    fi

    # Validate AppImage
    if [[ ! "$APPIMAGE" =~ \.AppImage$ ]]; then
        if command -v zenity &> /dev/null; then
            zenity --error --title="L·ªói" --text="File ph·∫£i c√≥ ph·∫ßn m·ªü r·ªông .AppImage." --width=300
        else
            echo -e "${RED}L·ªói: File ph·∫£i c√≥ ph·∫ßn m·ªü r·ªông .AppImage.${NC}"
        fi
        exit 1
    fi

    # Check if AppImage exists
    if [ ! -f "$APPIMAGE" ]; then
        if command -v zenity &> /dev/null; then
            zenity --error --title="L·ªói" --text="File AppImage kh√¥ng t·ªìn t·∫°i: $APPIMAGE" --width=300
        else
            echo -e "${RED}L·ªói: File AppImage kh√¥ng t·ªìn t·∫°i: $APPIMAGE${NC}"
        fi
        exit 1
    fi
}

# Function to get icon file using GUI or CLI
get_icon() {
    if command -v zenity &> /dev/null; then
        ICON_PROMPT=$(zenity --question --title="Icon" --text="B·∫°n c√≥ mu·ªën th√™m icon cho ·ª©ng d·ª•ng kh√¥ng?" --width=300 2>/dev/null)
        if [ $? -eq 0 ]; then
            ICON=$(zenity --file-selection --title="Ch·ªçn file icon" --file-filter="Image files | *.png *.jpg *.jpeg *.svg *.ico" 2>/dev/null)
            if [ -z "$ICON" ]; then
                zenity --info --title="Th√¥ng b√°o" --text="Kh√¥ng c√≥ icon n√†o ƒë∆∞·ª£c ch·ªçn. Ti·∫øp t·ª•c m√† kh√¥ng c√≥ icon." --width=300
            fi
        fi
    else
        ICON=${2:-}
    fi

    # Validate icon if provided
    if [ -n "$ICON" ] && [ ! -f "$ICON" ]; then
        if command -v zenity &> /dev/null; then
            zenity --error --title="L·ªói" --text="File icon kh√¥ng t·ªìn t·∫°i: $ICON" --width=300
        else
            echo -e "${RED}L·ªói: File icon kh√¥ng t·ªìn t·∫°i: $ICON${NC}"
        fi
        exit 1
    fi
}

# Function to get application name
get_app_name() {
    DEFAULT_NAME=$(basename "$APPIMAGE" .AppImage)
    
    if command -v zenity &> /dev/null; then
        CUSTOM_NAME=$(zenity --entry --title="T√™n ·ª©ng d·ª•ng" --text="Nh·∫≠p t√™n cho ·ª©ng d·ª•ng:" --entry-text="$DEFAULT_NAME" --width=300 2>/dev/null)
        if [ -n "$CUSTOM_NAME" ]; then
            APPNAME="$CUSTOM_NAME"
        else
            APPNAME="$DEFAULT_NAME"
        fi
    else
        APPNAME="$DEFAULT_NAME"
    fi
}

# Function to ask for desktop shortcut
create_desktop_shortcut() {
    CREATE_SHORTCUT=false
    
    if command -v zenity &> /dev/null; then
        zenity --question --title="Shortcut" --text="B·∫°n c√≥ mu·ªën t·∫°o shortcut tr√™n Desktop kh√¥ng?" --width=300 2>/dev/null
        if [ $? -eq 0 ]; then
            CREATE_SHORTCUT=true
        fi
    fi
}

# Main function
main() {
    check_sudo
    
    # Get AppImage and icon
    get_appimage "$1"
    get_icon "$2"
    get_app_name
    create_desktop_shortcut
    
    # Determine the correct home directory
    if [ -n "$SUDO_USER" ]; then
        USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
    else
        USER_HOME=$HOME
    fi

    DESKTOP_PATH="$USER_HOME/.local/share/applications"
    DESKTOP_FILE="$DESKTOP_PATH/$APPNAME.desktop"
    APPIMAGE_DEST="/opt/$APPNAME.AppImage"
    
    if [ -n "$ICON" ]; then
        ICON_DEST="/opt/$(basename "$ICON")"
    fi

    # Create applications directory if it doesn't exist
    mkdir -p "$DESKTOP_PATH"

    # Make AppImage executable
    chmod +x "$APPIMAGE"
    show_loader "ƒêang c·∫•p quy·ªÅn th·ª±c thi cho AppImage"

    # Move AppImage to /opt
    cp "$APPIMAGE" "$APPIMAGE_DEST"
    show_loader "ƒêang sao ch√©p AppImage v√†o /opt"

    # Move icon to /opt if provided
    if [ -n "$ICON" ]; then
        cp "$ICON" "$ICON_DEST"
        show_loader "ƒêang sao ch√©p icon v√†o /opt"
    fi

    # Create the .desktop file
    mkdir -p "$DESKTOP_PATH"
    cat > "$DESKTOP_FILE" <<EOF
[Desktop Entry]
Name=$APPNAME
Comment=Application launcher for $APPNAME
Exec=$APPIMAGE_DEST
Terminal=false
Type=Application
Categories=Utility
$( [ -n "$ICON" ] && echo "Icon=$ICON_DEST" || echo "" )
EOF
    show_loader "ƒêang t·∫°o file .desktop"

    # Create desktop shortcut if requested
    if [ "$CREATE_SHORTCUT" = true ]; then
        cp "$DESKTOP_FILE" "$USER_HOME/Desktop/"
        chmod +x "$USER_HOME/Desktop/$(basename "$DESKTOP_FILE")"
        chown $SUDO_USER:$SUDO_USER "$USER_HOME/Desktop/$(basename "$DESKTOP_FILE")"
        show_loader "ƒêang t·∫°o shortcut tr√™n Desktop"
    fi

    # Update desktop database
    update-desktop-database "$DESKTOP_PATH" &>/dev/null
    show_loader "ƒêang c·∫≠p nh·∫≠t c∆° s·ªü d·ªØ li·ªáu desktop"

    # Final message
    if command -v zenity &> /dev/null; then
        zenity --info --title="Ho√†n th√†nh" --text="·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o menu th√†nh c√¥ng!\n\nChi ti·∫øt:\n- AppImage: $APPIMAGE_DEST\n- Icon: ${ICON:+$ICON_DEST}\n- Desktop File: $DESKTOP_FILE\n\nB·∫°n c√≥ th·ªÉ t√¨m th·∫•y \"$APPNAME\" trong menu ·ª©ng d·ª•ng c·ªßa b·∫°n! üéâ" --width=400
    else
        cat <<EOF

${GREEN}Ho√†n th√†nh! ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c th√™m v√†o menu th√†nh c√¥ng.${NC}
Chi ti·∫øt: 
  AppImage: $APPIMAGE_DEST
  Icon: ${ICON:+$ICON_DEST (ho·∫∑c kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t)}
  Desktop File: $DESKTOP_FILE

B·∫°n c√≥ th·ªÉ t√¨m th·∫•y "$APPNAME" trong menu ·ª©ng d·ª•ng c·ªßa b·∫°n! üéâ
EOF
    fi
}

# Run the main function
main "$@"